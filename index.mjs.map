{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array via a callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} range\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = rangeBy( x.length, x, 1, 0, accessor );\n* // returns 18.0\n*/\nfunction rangeBy( N, x, strideX, offsetX, clbk, thisArg ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\tvar o;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX, clbk, thisArg );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = clbk.call( thisArg, x[ offsetX ], 0, offsetX, x );\n\t\tif ( v === void 0 || isnan( v ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmin = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tif ( min !== void 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tif ( v === void 0 ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nexport default rangeBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array via a callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} range\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = rangeBy( x.length, arraylike2object( x ), 1, 0, accessor );\n* // returns 18.0\n*/\nfunction rangeBy( N, x, strideX, offsetX, clbk, thisArg) {\n\tvar xbuf;\n\tvar get;\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = clbk.call( thisArg, get( xbuf, offsetX ), 0, offsetX, xbuf );\n\t\tif ( v === void 0 || isnan( v ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmin = clbk.call( thisArg, get( xbuf, ix ), i, ix, xbuf );\n\t\tif ( min !== void 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, ix, xbuf );\n\t\tif ( v === void 0 ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nexport default rangeBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array via a callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - index increment\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} range\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = rangeBy( x.length, x, 1, accessor );\n* // returns 18.0\n*/\nfunction rangeBy( N, x, strideX, clbk, thisArg ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default rangeBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the range of a strided array via a callback function.\n*\n* @module @stdlib/stats-base-range-by\n*\n* @example\n* import rangeBy from '@stdlib/stats-base-range-by';\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* var v = rangeBy( x.length, x, 1, accessor );\n* // returns 18.0\n*\n* @example\n* import rangeBy from '@stdlib/stats-base-range-by';\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* var v = rangeBy.ndarray( x.length, x, 1, 0, accessor );\n* // returns 18.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],"names":["rangeBy","N","x","strideX","offsetX","clbk","thisArg","max","min","ix","v","i","o","NaN","arraylike2object","accessorProtocol","xbuf","get","data","accessors","call","isnan","ndarray","stride2offset","setReadOnly","main"],"mappings":";;qaAkDA,SAASA,EAASC,EAAGC,EAAGC,EAASC,EAASC,EAAMC,GAC/C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,EACT,OAAOY,IAGR,IADAD,EAAIE,EAAkBZ,IACfa,iBACN,OCVF,SAAkBd,EAAGC,EAAGC,EAASC,EAASC,EAAMC,GAC/C,IAAIU,EACAC,EACAV,EACAC,EACAC,EACAC,EACAC,EAQJ,GALAK,EAAOd,EAAEgB,KAGTD,EAAMf,EAAEiB,UAAW,GAER,IAANlB,GAAuB,IAAZE,EAEf,YAAW,KADXO,EAAIL,EAAKe,KAAMd,EAASW,EAAKD,EAAMZ,GAAW,EAAGA,EAASY,KACrCK,EAAOX,GACpBG,IAED,EAGR,IADAJ,EAAKL,EACCO,EAAI,EAAGA,EAAIV,QAEH,KADbO,EAAMH,EAAKe,KAAMd,EAASW,EAAKD,EAAMP,GAAME,EAAGF,EAAIO,IAD/BL,IAKnBF,GAAMN,EAEP,GAAKQ,IAAMV,EACV,OAAOY,IAIR,IAFAN,EAAMC,EACNG,GAAK,EACIA,EAAIV,EAAGU,IAGf,GAFAF,GAAMN,OAEK,KADXO,EAAIL,EAAKe,KAAMd,EAASW,EAAKD,EAAMP,GAAME,EAAGF,EAAIO,IAChD,CAGA,GAAKK,EAAOX,GACX,OAAOA,EAEHA,EAAIF,EACRA,EAAME,EACKA,EAAIH,IACfA,EAAMG,EAPN,CAUF,OAAOH,EAAMC,CACd,CDzCSW,CAAWlB,EAAGW,EAAGT,EAASC,EAASC,EAAMC,GAEjD,GAAW,IAANL,GAAuB,IAAZE,EAEf,YAAW,KADXO,EAAIL,EAAKe,KAAMd,EAASJ,EAAGE,GAAW,EAAGA,EAASF,KAC7BmB,EAAOX,GACpBG,IAED,EAGR,IADAJ,EAAKL,EACCO,EAAI,EAAGA,EAAIV,QAEH,KADbO,EAAMH,EAAKe,KAAMd,EAASJ,EAAGO,GAAME,EAAGF,EAAIP,IADvBS,IAKnBF,GAAMN,EAEP,GAAKQ,IAAMV,EACV,OAAOY,IAIR,IAFAN,EAAMC,EACNG,GAAK,EACIA,EAAIV,EAAGU,IAGf,GAFAF,GAAMN,OAEK,KADXO,EAAIL,EAAKe,KAAMd,EAASJ,EAAGO,GAAME,EAAGF,EAAIP,IACxC,CAGA,GAAKmB,EAAOX,GACX,OAAOA,EAEHA,EAAIF,EACRA,EAAME,EACKA,EAAIH,IACfA,EAAMG,EAPN,CAUF,OAAOH,EAAMC,CACd,CErDA,SAASR,EAASC,EAAGC,EAAGC,EAASE,EAAMC,GACtC,OAAOgB,EAASrB,EAAGC,EAAGC,EAASoB,EAAetB,EAAGE,GAAWE,EAAMC,EACnE,CCSAkB,EAAAC,EAAA,UAAAH"}